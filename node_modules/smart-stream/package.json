{
  "name": "smart-stream",
  "version": "0.2.0",
  "description": "A library and middleware for Node.js Streams. Implementing your own Stream is easy!",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/thesmart/node-SmartStream.git"
  },
  "keywords": [
    "Stream",
    "smart-stream",
    "smart stream",
    "middleware",
    "ReadStream",
    "WriteStream"
  ],
  "author": {
    "name": "John Smart",
    "email": "smart@telly.com",
    "url": "https://github.com/thesmart"
  },
  "license": "BSD",
  "dependencies": {
    "underscore": "1.4.2",
    "mocha": "1.8.1"
  },
  "readme": "node-SmartStream\n===================\n\nMiddleware for Node.js Streams.  Creating your own Stream pipeline is easy!\n\n```\nnpm install smart-stream\n```\n\nExample of an asynchronous pipeline:\n\n```javascript\nvar fs = require('fs');\nvar ss = require('smart-stream');\n\n// open some file streams\nvar readStream = fs.createReadStream('./input.txt', { encoding: 'utf8' });\nvar writeStream = fs.createWriteStream('./output.txt');\n\n// create your own stream middleware\nvar lowerCaseStream = new ss.SmartStream('LowerCaseStream'); // bi-directional stream\nlowerCaseStream.setMiddleware(function(data, cb) {\n\tvar result = data.toLowerCase();\n\tcb(null, result);\n\t// NOTE: set result to undefined to prevent it from moving downstream\n});\n\n// lay some pipe, Tex!\nreadStream\n\t.pipe(lowerCaseStream)\n\t.pipe(writeStream);\n```\n\ninput.txt\n\n```\nWHY R U ALL\nSO OFFENDED\nBY ALL CAPS???\n```\n\noutput.txt\n\n```\nwhy r u all\nso offended\nby all caps???\n```\n\n## Throttling feature\n\nEver have a producer (e.g. database) that is too fast for the consumer (e.g. http api)?  Streams solve this problem!\n\n```javascript\n// when slowStream hits 1,000 concurrent operations, it will ask fastStream to pause.\n// when slowStream completes the operations, it will ask fastStream to resume.\nvar slowStream = new ss.SmartStream('name', 1000);\nfastStream.pipe(slowStream);\n```\n\n## Accumulate operations\n\nSometimes you may want to accumulate multiple data items together before sending a single item downstream.\n\n```javascript\nvar ss = require('smart-stream');\nvar assert = require('assert');\n\n// This MongoDB cursor loops over users in the database\nvar cursor = userCollection.find({});\n\n// I want to accumulate 50 users in a batch\nvar accumulatorStream = new ss.AccStream('Accumulator', 50);\n\n// not every batch will be exactly 50, but almost all but the last one will be\naccumulatorStream.setMiddlewareSync(function(batch) {\n\tconsole.log(batch.length);\n});\n\ncursor.stream.pipe(accumulatorStream);\n```\n\n```\n50\n50\n50\n...\n21\n```\n\n## SmartStream internals\n\nSimilar to unix piping, Streams can be piped together to form a pipeline:\n\n```\nreadableStream.pipe(writableStreamA).pipe(writableStreamB);\nreadableStream.start();\n```\n\nThis works via a combination of pub/sub and functional calls:\n\n*Readable Stream    =>    Writable Stream*\n\nevent 'data'    =>    write(object)\n\nevent 'end'    =>    end()\n\nevent 'drain'    =>    resume()\n\nevent 'pause'    =>    pause()\n\nevent 'close'    =>    destroy()\n\nevent 'error'    =>    event 'error'\n\n\n### Writable Streams\n\nMethods: write, end, destroy\nEvents: drain, error, close, pause\n\n* Methods:\n 1. write(object) - called from an upstream Stream (or functionally) when data is ready for this node in the Stream pipeline. Increments \"countUpstream\" and the \"countPending\" count.\n 1. end() - called from an upstream Stream when it has no data left to write\n 1. destroy() - called to destroy the Stream node\n* Events:\n 1. event 'drain' - emitted from a Stream any time it is no longer busy, meaning its \"countPending\" falls to safe levels.  This allows any paused up-stream Stream to resume writing data.\n 1. event 'error' - the Stream has encountered an error. This error will ripple through the pipeline.\n 1. event 'close' - emitted by the last writeable stream in a pipeline when it is closed and should not be written to again ever.\n 1. event 'pause' - emitted from a writable Stream when it is busy processing pending data, and needs up-stream to pause writing data.  Does not guarantee that data will not be written, more of a \"gentleman's\" agreement.\n\n### Readable Streams\n\nMethods: pause, resume, end, destroy\nEvents: data, end, error\n\n* Methods:\n 1. pause() - called to pause downstream production\n 1. resume() - called to resume downstream production\n 1. end() - called when the upstream Stream has no more data to write downstream\n 1. destroy() - called to destroy the Stream node\n* Events:\n 1. event 'data' - emitted with data read for downstream consumption\n 1. event 'end' - emitted after end() is called, when there is no more data to emit\n 1. event 'error' - the Stream has encountered an error. This error will ripple through the pipeline.\n\n## Further reading\n\nHere is [a simple blog article about Streams](http://maxogden.com/node-streams).\n\nHere is a [SlideShare discussing Streams](http://www.slideshare.net/atcrabtree/functional-programming-with-streams-in-nodejs) in NodeJs",
  "_id": "smart-stream@0.2.0",
  "dist": {
    "shasum": "6b462efa6b636aca7f171b4379660f0e643c2e7f",
    "tarball": "http://registry.npmjs.org/smart-stream/-/smart-stream-0.2.0.tgz"
  },
  "_npmVersion": "1.1.63",
  "_npmUser": {
    "name": "thesmart",
    "email": "smartj@gmail.com"
  },
  "maintainers": [
    {
      "name": "thesmart",
      "email": "smartj@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "6b462efa6b636aca7f171b4379660f0e643c2e7f",
  "_from": "smart-stream@",
  "_resolved": "https://registry.npmjs.org/smart-stream/-/smart-stream-0.2.0.tgz",
  "bugs": {
    "url": "https://github.com/thesmart/node-SmartStream/issues"
  },
  "homepage": "https://github.com/thesmart/node-SmartStream"
}
